# version: '3'

# services:
#   app:
#     build:
#       context: . # указываем директорию с Dockerfile
#     entrypoint: "sh -c 'python manage.py migrate && python manage.py runserver 0.0.0.0:8000'" # указываем команду для запуска сервера
#     volumes:
#       - ./:/app
#     ports:
#       - "8000:8000"  # Добавляем проброс порта
#     depends_on:
#       db:
#         condition: service_healthy
#       # redis:
#       #   condition: service_healthy
#     networks:
#       - backend-network

#   db:
#     image: postgis/postgis:15-3.3  # Образ с предустановленным PostGIS
#     ports:
#       - "5432:5432"
#     environment:
#       POSTGRES_DB: mygis
#       POSTGRES_USER: postgres
#       POSTGRES_PASSWORD: mygispass
#     healthcheck:
#       test: ["CMD-SHELL", "pg_isready -U postgres"] 
#     networks:
#       - backend-network

#   # redis:
#   #   image: redis:alpine
#   #   ports:
#   #     - "6379:6379"
#   #   healthcheck:
#   #     test: ["CMD", "redis-cli", "PING"]
#   #     interval: 1s
#   #     timeout: 1s
#   #     retries: 30
#   #   networks:
#   #     - backend-network

# #   map:
# #     image: overv/openstreetmap-tile-server
# #     volumes:
# #       - osm-data:/data/database/
# #     ports:
# #       - "8080:80"
# #     command: "run"

# # volumes:
# #   osm-data:
# #     external: true

# networks:
#   backend-network:
#     driver: bridge



# version: '3'

services:
  db:
    image: postgis/postgis:13-3.3
    container_name: postgis
    environment:
      POSTGRES_DB: ${DB_NAME}
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./postgres-init:/docker-entrypoint-initdb.d  # Скрипты инициализации
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER} -d ${DB_NAME}"]
      interval: 10s
      timeout: 5s
      retries: 5

  web:
    build: .
    container_name: django
    # entrypoint: "sh -c 'python manage.py migrate && gunicorn --bind 0.0.0.0:8000 --reload gisproject.wsgi:application'"
    entrypoint: "sh -c 'python manage.py migrate && python manage.py runserver 0.0.0.0:8000'"
    volumes:
      - .:/app
    environment:
      POSTGRES_NAME: ${DB_NAME}
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_HOST: db
      POSTGRES_PORT: 5432
    ports:
      - "8000:8000"
    depends_on:
      db:
        condition: service_healthy

volumes:
  postgres_data: